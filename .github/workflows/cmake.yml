name: CMake

on:
  push:
  pull_request:
  release:
    types: [created]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{matrix.name}}
    strategy:
      matrix:
        include:
          - os: ubuntu-20.04
            name: Linux
            cache-key: linux
            cmake-args: "-DPICO_EXTRAS_PATH=$GITHUB_WORKSPACE/pico-extras -DPIMORONI_PICO_PATH=$GITHUB_WORKSPACE/pimoroni-pico -DPICO_SDK_PATH=$GITHUB_WORKSPACE/pico-sdk -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install"
            apt-packages: clang-tidy gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib

    runs-on: ${{matrix.os}}

    env:
      PICO_SDK_PATH: $GITHUB_WORKSPACE/pico-sdk
      PIMORONI_PICO_LIBS: $GITHUB_WORKSPACE/pimoroni-pico
      PICO_EXTRAS_PATH: $GITHUB_WORKSPACE/pico-extras
      RELEASE_FILE: ${{github.event.repository.name}}-${{github.event.release.tag_name}}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          path: project

      # Check code
      - name: cppcheck
        uses: deep5050/cppcheck-action@main
        with:
          github_token: ${{ secrets.GITHUB_TOKEN}}

      - name: publish report
        uses: mikeal/publish-to-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: 'main'

      # Checkout the Pimoroni Pico Libraries
      - name: Checkout Pimoroni Pico Libraries
        uses: actions/checkout@v2
        with:
          repository: pimoroni/pimoroni-pico
          path: pimoroni-pico

      # Checkout the Pico SDK
      - name: Checkout Pico SDK
        uses: actions/checkout@v2
        with:
          repository: raspberrypi/pico-sdk
          path: pico-sdk
          submodules: true

      # Checkout Pico Extras
      - name: Checkout Pico Extras
        uses: actions/checkout@v2
        with:
          repository: raspberrypi/pico-extras
          path: pico-extras
      - name: Checkout submodules
        run: |
          cd pico-extras
          git submodule sync --recursive
          git submodule update --init --recursive

      # Linux deps
      - name: Install deps
        if: runner.os == 'Linux'
        run: |
          sudo apt update && sudo apt install ${{matrix.apt-packages}}

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        working-directory: ${{runner.workspace}}/build
        run: cmake $GITHUB_WORKSPACE/project -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCPACK_PACKAGE_FILE_NAME=${{env.RELEASE_FILE}} ${{matrix.cmake-args}}

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: |
          cmake --build . --config $BUILD_TYPE -j 2

      - name: Build Release Packages
        if: github.event_name == 'release'
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: |
          cmake --build . --config $BUILD_TYPE --target package -j 2

      - name: Upload .zip
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          asset_path: ${{runner.workspace}}/build/${{env.RELEASE_FILE}}.zip
          upload_url: ${{github.event.release.upload_url}}
          asset_name: ${{env.RELEASE_FILE}}.zip
          asset_content_type: application/zip

      - name: Upload .tar.gz
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          asset_path: ${{runner.workspace}}/build/${{env.RELEASE_FILE}}.tar.gz
          upload_url: ${{github.event.release.upload_url}}
          asset_name: ${{env.RELEASE_FILE}}.tar.gz
          asset_content_type: application/octet-stream